import 'package:flutter/material.dart'; 
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:developer' as developer;
import 'package:url_launcher/url_launcher.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  ThemeMode _themeMode = ThemeMode.light;

  void _toggleTheme() {
    setState(() {
      _themeMode = _themeMode == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AI Text Detector',
      theme: ThemeData(
        primarySwatch: Colors.teal,
        brightness: Brightness.light,
      ),
      darkTheme: ThemeData(
        primarySwatch: Colors.teal,
        brightness: Brightness.dark,
      ),
      themeMode: _themeMode,
      debugShowCheckedModeBanner: false,
      home: HomePage(toggleTheme: _toggleTheme),
    );
  }
}

class HomePage extends StatefulWidget {
  final VoidCallback toggleTheme;
  const HomePage({super.key, required this.toggleTheme});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final TextEditingController _controller = TextEditingController();
  bool _isLoading = false;
  Map<String, double>? _result;

  Future<void> _checkText() async {
    if (_controller.text.isEmpty) return;
    setState(() {
      _isLoading = true;
      _result = null;
    });

    try {
      final response = await http.post(
        Uri.parse('https://aitextdetectormodel.onrender.com/predict'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'text': _controller.text}),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body) as Map<String, dynamic>;
        setState(() {
          _result = {
            'AI_probability': ((data['AI_probability'] as num).toDouble() * 100),
            'Human_probability': ((data['Human_probability'] as num).toDouble() * 100),
          };
        });

        Future.delayed(const Duration(seconds: 4), () {
          setState(() {
            _result = null;
          });
        });
      } else {
        throw Exception('Failed with status code: ${response.statusCode}.');
      }
    } catch (error) {
      developer.log("Error occurred: $error", name: 'API Error', error: error);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $error. Please try again.')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('AI Text Detector'),
        actions: [
          IconButton(
            tooltip: 'Toggle Theme',
            icon: const Icon(Icons.brightness_6),
            onPressed: widget.toggleTheme,
          ),
        ],
        centerTitle: true,
      ),
      body: Stack(
        children: [
          SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                _buildIntroCard(),
                _buildTextInput(),
                _buildCheckButton(),
                if (_isLoading) _buildAnimatedProgressBar(),
              ],
            ),
          ),
          if (_result != null) _buildFloatingResultCard(),
        ],
      ),
      floatingActionButton: _buildFloatingActionButtons(),
    );
  }

  Widget _buildIntroCard() {
    return Card(
      color: Colors.green[50],
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 5,
      child: const Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'AI Text Detector',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.green),
            ),
            SizedBox(height: 10),
            Text(
              'This tool helps you determine if a text was generated by AI or written by a human. The backend model is a BERT-based classifier, trained with thousands of text samples, running on Python Flask and deployed on Render.',
              style: TextStyle(fontSize: 16, color: Colors.black87),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextInput() {
    return Card(
      color: Colors.white,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: TextField(
          controller: _controller,
          maxLines: 5,
          decoration: InputDecoration(
            hintText: 'Paste your text here...',
            border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
            filled: true,
            fillColor: Colors.white,
          ),
        ),
      ),
    );
  }

  Widget _buildCheckButton() {
    return Center(
      child: ElevatedButton(
        onPressed: _isLoading ? null : _checkText,
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 40),
          backgroundColor: Colors.green,
          textStyle: const TextStyle(fontSize: 18),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
        child: const Text('Analyze Text'),
      ),
    );
  }

  Widget _buildFloatingResultCard() {
    return Center(
      child: Card(
        color: Colors.green[50],
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        elevation: 8,
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text(
                'Results',
                style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold, color: Colors.green),
              ),
              const SizedBox(height: 10),
              Text(
                'AI Probability: ${_result!['AI_probability']!.toStringAsFixed(2)}%',
                style: const TextStyle(fontSize: 18, color: Colors.black87),
              ),
              Text(
                'Human Probability: ${_result!['Human_probability']!.toStringAsFixed(2)}%',
                style: const TextStyle(fontSize: 18, color: Colors.black87),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAnimatedProgressBar() {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: LinearProgressIndicator(
        backgroundColor: Colors.green[100],
        color: Colors.green,
        minHeight: 8,
      ),
    );
  }

  Widget _buildFloatingActionButtons() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        _buildSocialButton(
          icon: Icons.web,
          tooltip: 'Portfolio',
          url: 'https://bramwelagina.my.canva.site/myportofolio',
        ),
        const SizedBox(height: 10),
        _buildSocialButton(
          icon: FontAwesomeIcons.github,
          tooltip: 'GitHub',
          url: 'https://github.com/Bramtheking',
        ),
        const SizedBox(height: 10),
        _buildSocialButton(
          icon: Icons.linked_camera,
          tooltip: 'LinkedIn',
          url: 'https://www.linkedin.com/in/bramwel-agina-a88678266/',
        ),
      ],
    );
  }

  FloatingActionButton _buildSocialButton(
      {required IconData icon, required String tooltip, required String url}) {
    return FloatingActionButton(
      onPressed: () async {
        if (await canLaunchUrl(Uri.parse(url))) {
          await launchUrl(Uri.parse(url), mode: LaunchMode.externalApplication);
        } else {
          throw 'Could not launch $url';
        }
      },
      tooltip: tooltip,
      child: Icon(icon),
    );
  }
}
